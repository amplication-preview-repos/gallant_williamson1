/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TwoFactorAuthService } from "../twoFactorAuth.service";
import { TwoFactorAuthCreateInput } from "./TwoFactorAuthCreateInput";
import { TwoFactorAuth } from "./TwoFactorAuth";
import { TwoFactorAuthFindManyArgs } from "./TwoFactorAuthFindManyArgs";
import { TwoFactorAuthWhereUniqueInput } from "./TwoFactorAuthWhereUniqueInput";
import { TwoFactorAuthUpdateInput } from "./TwoFactorAuthUpdateInput";

export class TwoFactorAuthControllerBase {
  constructor(protected readonly service: TwoFactorAuthService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TwoFactorAuth })
  async createTwoFactorAuth(
    @common.Body() data: TwoFactorAuthCreateInput
  ): Promise<TwoFactorAuth> {
    return await this.service.createTwoFactorAuth({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TwoFactorAuth] })
  @ApiNestedQuery(TwoFactorAuthFindManyArgs)
  async twoFactorAuths(
    @common.Req() request: Request
  ): Promise<TwoFactorAuth[]> {
    const args = plainToClass(TwoFactorAuthFindManyArgs, request.query);
    return this.service.twoFactorAuths({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TwoFactorAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async twoFactorAuth(
    @common.Param() params: TwoFactorAuthWhereUniqueInput
  ): Promise<TwoFactorAuth | null> {
    const result = await this.service.twoFactorAuth({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TwoFactorAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTwoFactorAuth(
    @common.Param() params: TwoFactorAuthWhereUniqueInput,
    @common.Body() data: TwoFactorAuthUpdateInput
  ): Promise<TwoFactorAuth | null> {
    try {
      return await this.service.updateTwoFactorAuth({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TwoFactorAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTwoFactorAuth(
    @common.Param() params: TwoFactorAuthWhereUniqueInput
  ): Promise<TwoFactorAuth | null> {
    try {
      return await this.service.deleteTwoFactorAuth({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
