/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TwoFactorAuth as PrismaTwoFactorAuth } from "@prisma/client";

export class TwoFactorAuthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TwoFactorAuthCountArgs, "select">
  ): Promise<number> {
    return this.prisma.twoFactorAuth.count(args);
  }

  async twoFactorAuths(
    args: Prisma.TwoFactorAuthFindManyArgs
  ): Promise<PrismaTwoFactorAuth[]> {
    return this.prisma.twoFactorAuth.findMany(args);
  }
  async twoFactorAuth(
    args: Prisma.TwoFactorAuthFindUniqueArgs
  ): Promise<PrismaTwoFactorAuth | null> {
    return this.prisma.twoFactorAuth.findUnique(args);
  }
  async createTwoFactorAuth(
    args: Prisma.TwoFactorAuthCreateArgs
  ): Promise<PrismaTwoFactorAuth> {
    return this.prisma.twoFactorAuth.create(args);
  }
  async updateTwoFactorAuth(
    args: Prisma.TwoFactorAuthUpdateArgs
  ): Promise<PrismaTwoFactorAuth> {
    return this.prisma.twoFactorAuth.update(args);
  }
  async deleteTwoFactorAuth(
    args: Prisma.TwoFactorAuthDeleteArgs
  ): Promise<PrismaTwoFactorAuth> {
    return this.prisma.twoFactorAuth.delete(args);
  }
}
