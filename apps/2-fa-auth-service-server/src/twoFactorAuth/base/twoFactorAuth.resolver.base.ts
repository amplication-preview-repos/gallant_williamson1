/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TwoFactorAuth } from "./TwoFactorAuth";
import { TwoFactorAuthCountArgs } from "./TwoFactorAuthCountArgs";
import { TwoFactorAuthFindManyArgs } from "./TwoFactorAuthFindManyArgs";
import { TwoFactorAuthFindUniqueArgs } from "./TwoFactorAuthFindUniqueArgs";
import { DeleteTwoFactorAuthArgs } from "./DeleteTwoFactorAuthArgs";
import { TwoFactorAuthService } from "../twoFactorAuth.service";
@graphql.Resolver(() => TwoFactorAuth)
export class TwoFactorAuthResolverBase {
  constructor(protected readonly service: TwoFactorAuthService) {}

  async _twoFactorAuthsMeta(
    @graphql.Args() args: TwoFactorAuthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TwoFactorAuth])
  async twoFactorAuths(
    @graphql.Args() args: TwoFactorAuthFindManyArgs
  ): Promise<TwoFactorAuth[]> {
    return this.service.twoFactorAuths(args);
  }

  @graphql.Query(() => TwoFactorAuth, { nullable: true })
  async twoFactorAuth(
    @graphql.Args() args: TwoFactorAuthFindUniqueArgs
  ): Promise<TwoFactorAuth | null> {
    const result = await this.service.twoFactorAuth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TwoFactorAuth)
  async deleteTwoFactorAuth(
    @graphql.Args() args: DeleteTwoFactorAuthArgs
  ): Promise<TwoFactorAuth | null> {
    try {
      return await this.service.deleteTwoFactorAuth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
